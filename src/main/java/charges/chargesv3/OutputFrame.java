/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package charges.chargesv3;
import java.util.ArrayList;

/**
 *
 * @author CoBra1341
 */
public class OutputFrame extends javax.swing.JFrame {
    public static double time = 0;
    private static int distanceSearch = 0;
    ArrayList<Double> distancesList = new ArrayList<>();
    Charges c1 = new Charges(InputFrame.inputOne, 0, 0);
    Charges c2 = new Charges(InputFrame.inputTwo, 0, 0);

    /**
     * Creates new form OutputFrame
     */
    public OutputFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        timeOutput = new javax.swing.JTextField();
        distanceBetweenChargesOutput = new javax.swing.JTextField();
        forceOnChargeOneOutput = new javax.swing.JTextField();
        forceOnChargeTwoOutput = new javax.swing.JTextField();
        forwardsTime = new javax.swing.JButton();
        backwardsTime = new javax.swing.JButton();
        stopSimulation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Time (s):");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 41, -1, -1));

        jLabel2.setText("Force On Charge One (N):");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 41, -1, -1));

        jLabel3.setText("Force On Charge Two (N):");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(471, 41, -1, -1));

        jLabel4.setText("Distance (m):");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, -1, -1));

        timeOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeOutputActionPerformed(evt);
            }
        });
        getContentPane().add(timeOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 61, 161, -1));

        distanceBetweenChargesOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceBetweenChargesOutputActionPerformed(evt);
            }
        });
        getContentPane().add(distanceBetweenChargesOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 162, -1));

        forceOnChargeOneOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceOnChargeOneOutputActionPerformed(evt);
            }
        });
        getContentPane().add(forceOnChargeOneOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 61, 160, -1));

        forceOnChargeTwoOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceOnChargeTwoOutputActionPerformed(evt);
            }
        });
        getContentPane().add(forceOnChargeTwoOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 61, 160, -1));

        forwardsTime.setText("Forwards Time (+1ns)");
        forwardsTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardsTimeActionPerformed(evt);
            }
        });
        getContentPane().add(forwardsTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 332, -1, -1));

        backwardsTime.setText("Backwards Time (+1ns)");
        backwardsTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardsTimeActionPerformed(evt);
            }
        });
        getContentPane().add(backwardsTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 332, -1, -1));

        stopSimulation.setText("Stop Simulation");
        stopSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSimulationActionPerformed(evt);
            }
        });
        getContentPane().add(stopSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 330, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void forwardsTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardsTimeActionPerformed
        // TODO add your handling code here:
        //Handles Number Outputs Forwards In Time
        if(time == 0)
        {
            c1.setChargeDistance(Double.parseDouble(distanceBetweenChargesOutput.getText()));
            distancesList.add(c1.getDistance());

            c1.setCharge(InputFrame.inputOne);
            c2.setCharge(InputFrame.inputTwo);
            c1.setMass();
            c2.setMass();
        }
        distanceSearch += 1;
        System.out.println(distanceSearch);
        time += 0.000000001;
        
        c1.getNewChargeAcceleration(c1, c2);
        c1.getNewChargeVelocity(c1, c2, time);
        c2.getNewChargeAcceleration(c1, c2);
        c2.getNewChargeVelocity(c1, c2, time);
        distanceBetweenChargesOutput.setText(Double.toString(c1.getNewDistance(c1, c2, time, 1)));
        distancesList.add(c1.getDistance());
        timeOutput.setText(Double.toString(time));
        forceOnChargeOneOutput.setText(Double.toString(c1.getElectricForce(c1, c2)));
        forceOnChargeTwoOutput.setText(Double.toString(c2.getElectricForce(c1, c2)));
    }//GEN-LAST:event_forwardsTimeActionPerformed

    private void backwardsTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardsTimeActionPerformed
        // TODO add your handling code here:
        //Handles Number Outputs Backwards In Time
        if(time > 0)
        {
            if(distanceSearch > 0)
            {
                distancesList.remove(distanceSearch);
                distanceSearch -= 1;
                System.out.println(distanceSearch);
                distancesList.get(distanceSearch);
                distanceBetweenChargesOutput.setText(Double.toString(distancesList.get(distanceSearch)));
                Charges.setChargeDistance(Double.parseDouble(distanceBetweenChargesOutput.getText()));
                
                forceOnChargeOneOutput.setText(Double.toString(c1.getElectricForce(c1, c2)));
                forceOnChargeTwoOutput.setText(Double.toString(c2.getElectricForce(c1, c2)));
                time -= 0.000000001;
                timeOutput.setText(Double.toString(time));
            }
        }
    }//GEN-LAST:event_backwardsTimeActionPerformed

    private void stopSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSimulationActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new InputFrame().setVisible(true);
    }//GEN-LAST:event_stopSimulationActionPerformed

    private void timeOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeOutputActionPerformed

    private void forceOnChargeOneOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceOnChargeOneOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forceOnChargeOneOutputActionPerformed

    private void forceOnChargeTwoOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceOnChargeTwoOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forceOnChargeTwoOutputActionPerformed

    private void distanceBetweenChargesOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceBetweenChargesOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_distanceBetweenChargesOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OutputFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OutputFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OutputFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OutputFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OutputFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardsTime;
    public static javax.swing.JTextField distanceBetweenChargesOutput;
    public static javax.swing.JTextField forceOnChargeOneOutput;
    public static javax.swing.JTextField forceOnChargeTwoOutput;
    private javax.swing.JButton forwardsTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton stopSimulation;
    public static javax.swing.JTextField timeOutput;
    // End of variables declaration//GEN-END:variables
}
